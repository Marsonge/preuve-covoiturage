version: '3.5'
services:
  proxy:
    image: traefik:v2.4
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--providers.docker.network=back"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
    volumes:
      - ${PWD}/docker/traefik/config.yml:/etc/traefik/dynamic/config.yml
      - ${PWD}/docker/traefik/certs:/etc/certs
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - dashboard
    networks:
      back:
      front:
          aliases:
            - api.covoiturage.dev
            - app.covoiturage.dev

  postgres:
    build: ./docker/postgres
    # ports:
      # - 5432:5432
    networks:
      - back
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'test'

  redis:
    build: './docker/redis'
    # ports:
      # - 6379:6379
    networks:
      - back

  wait:
    image: busybox:1.33
    environment:
      DOMAIN: api
      PORT: 8080
    networks:
      - back
    command: ['/bin/sh', '-c', 'until nc -zv $$DOMAIN $$PORT -w1; do echo "waiting for app"; sleep 1; done']

  smtp:
    image: mailhog/mailhog:v1.0.1
    # ports:
      # - 1025:1025
      # - 8025:8025
    environment:
      MH_CORS_ORIGIN: '*'
    networks:
      - back

  dashboard:
    # ports:
      # - 8080:8080
    volumes:
      - ${PWD}/docker/dashboard/ci.env.js:/usr/share/nginx/html/assets/env.js
    build:
      dockerfile: ./docker/dashboard/prod/Dockerfile
      context: .
    networks:
      - back
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`app.covoiturage.dev`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"

  api:
    build:
      dockerfile: ./docker/api/prod/Dockerfile
      context: .
    # ports:
      # - 8080:8080
    environment:
      DEBUG: "*"
      # APP_CORS: "https://app.covoiturage.dev"
      APP_APP_URL: https://app.covoiturage.dev
      APP_JWT_SECRET: thisIsASecret0000
      AWS_ENDPOINT: http://minioadmin:minioadmin@s3:9000
      AWS_REGION: fr-par
      APP_POSTGRES_URL: postgres://postgres:postgres@postgres:5432/test
      APP_REDIS_URL: redis://redis:6379/1
      APP_MAIL_SMTP_URL: smtp://smtp:1025
      PORT: 8080
      NODE_ENV: local
      APP_ENV: local
    networks:
      - back
    depends_on:
      - redis
      - postgres
      - smtp
      - s3
    # volumes:
      # - .:/app:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.covoiturage.dev`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
      - "traefik.http.routers.api.tls=true"

  s3:
    image: minio/minio:edge  
    # ports:
      # - 9000:9000 
    networks:
      - back
    command: 'server /data'

  s3-init:
    image: minio/mc:edge
    networks:
      - back
    environment:
      MINIO_URL: http://s3:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    entrypoint: ['sh', '-c', 'mc alias set minio $$MINIO_URL $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && mc mb minio/$$BUCKET']
    depends_on:
      - s3

  cypress:
    build:
      dockerfile: ../docker/cypress/Dockerfile
      context: ./tests
    volumes:
      - /tmp/cypress/videos:/app/cypress/videos
    environment:
      CYPRESS_baseUrl: https://app.covoiturage.dev
    depends_on:
      - api
    networks:
      - front

networks:
  front:
  back:
